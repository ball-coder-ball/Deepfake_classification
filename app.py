import streamlit as st
import torch
import torchvision.transforms as transforms
from PIL import Image
import warnings
import torch.nn as nn 
import torchvision.models as models
import os
import gdown

model = models.resnet50(weights=models.ResNet50_Weights.DEFAULT)

model.fc = nn.Sequential(
    nn.Linear(model.fc.in_features, 512),
    nn.BatchNorm1d(512),
    nn.ReLU(inplace=True),
    nn.Dropout(p=0.4),
    nn.Linear(512, 2)
)

for param in model.parameters():
    param.requires_grad = False

for param in model.fc.parameters():
    param.requires_grad = True

warnings.filterwarnings("ignore")

st.set_page_config(
    page_title="Deepfake Detection",
    page_icon=":shield:",
    initial_sidebar_state='auto'
)

hide_streamlit_style = """
    <style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    </style>
"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

@st.cache_resource
def load_model(model_path):
    local_model = models.resnet50()
    local_model.fc = nn.Sequential(
        nn.Linear(local_model.fc.in_features, 512),
        nn.BatchNorm1d(512),
        nn.ReLU(inplace=True),
        nn.Dropout(p=0.4),
        nn.Linear(512, 2)
    )

    checkpoint = torch.load(model_path, map_location=torch.device('cpu'))
    local_model.load_state_dict(checkpoint['model_state_dict'])
    
    local_model.eval()
    return local_model

def import_and_predict(image_data, model_instance):
    """
    Preprocesses the image and makes a prediction using the loaded PyTorch model.
    """
    preprocess = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])

    image = preprocess(image_data).unsqueeze(0)

    with torch.no_grad():
        outputs = model_instance(image)
        probabilities = torch.nn.functional.softmax(outputs, dim=1)
        confidence, predicted_class_index = torch.max(probabilities, 1)

    return predicted_class_index.item(), confidence.item()

def download_model_from_drive(file_id, output_path):
    if not os.path.exists(output_path):
        st.info("Downloading model... This might take a moment.")
        try:
            url = f'https://drive.google.com/uc?id={file_id}'
            gdown.download(url, output_path, quiet=False)
            st.success("Model downloaded successfully.")
        except Exception as e:
            st.error(f"Error downloading model: {e}")
            st.stop()

GDRIVE_FILE_ID = "1O-xajP2gfAmMLGkxrjmb_hfUMcAnbUZA"
MODEL_PATH = "Stage1_fix_ResNet50_CE_3Data_checkpoint_best_epoch_8" 

download_model_from_drive(GDRIVE_FILE_ID, MODEL_PATH)


try:
    model_to_use = load_model(MODEL_PATH)
except FileNotFoundError:
    st.error(f"Model file not found at {MODEL_PATH}. Please update the path.")
    st.stop()
except Exception as e:
    st.error(f"An error occurred while loading the model: {e}")
    st.stop()

with st.sidebar:
    st.title("Deepfake Detector")
    st.subheader("Upload an image to determine if it is real or a deepfake.")

st.write("# Deepfake Image Classification")

file = st.file_uploader("Upload an image...", type=["jpg", "png", "jpeg"])

CLASS_NAMES = ['Deepfake', 'Real']

if file is None:
    st.text("Please upload an image file")
else:
    image = Image.open(file).convert("RGB")
    st.image(image, use_column_width=True)

    predicted_class_idx, confidence = import_and_predict(image, model_to_use)
    predicted_class_name = CLASS_NAMES[predicted_class_idx]

    st.sidebar.metric(label="Confidence", value=f"{confidence:.2%}")

    if predicted_class_name == 'Real':
        st.balloons()
        st.sidebar.success(f"Detected Class: {predicted_class_name}")
        st.markdown("## Verdict: Authentic Image")
        st.info("Our analysis indicates this image is authentic. It does not show signs of being generated by a deepfake AI.")

    elif predicted_class_name == 'Deepfake':
        st.sidebar.error(f"Detected Class: {predicted_class_name}")
        st.markdown("## Verdict: Likely a Deepfake")
        st.warning("This image shows characteristics commonly associated with AI-generated deepfakes. Be cautious about the authenticity of this content.")